// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pb/example/example.proto

package example

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("pb/example/example.proto", fileDescriptor_2f3060f9181cc9f9) }

var fileDescriptor_2f3060f9181cc9f9 = []byte{
	// 207 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x28, 0x48, 0xd2, 0x4f,
	0xad, 0x48, 0xcc, 0x2d, 0xc8, 0x49, 0x85, 0xd1, 0x7a, 0x05, 0x45, 0xf9, 0x25, 0xf9, 0x42, 0x5c,
	0x05, 0x49, 0x7a, 0xc9, 0xf9, 0x79, 0x25, 0xa9, 0x79, 0x25, 0x52, 0x1a, 0x98, 0xaa, 0xe2, 0x8b,
	0x53, 0x8b, 0xca, 0x32, 0x93, 0x53, 0xe3, 0xd3, 0x53, 0xf3, 0x52, 0x8b, 0x12, 0x73, 0x20, 0xba,
	0xa4, 0xc4, 0x90, 0x54, 0x16, 0x97, 0xe4, 0x17, 0x55, 0x62, 0x11, 0x2f, 0xc9, 0x2f, 0xc8, 0x4c,
	0x86, 0x88, 0x1b, 0x1d, 0x63, 0xe2, 0xe2, 0x73, 0x85, 0x88, 0x07, 0x43, 0x0c, 0x14, 0xf2, 0xe6,
	0x12, 0x72, 0x2e, 0x4a, 0x4d, 0x2c, 0x49, 0x0d, 0x01, 0xa9, 0x83, 0x4a, 0x0a, 0x29, 0xe8, 0x21,
	0xdc, 0xa3, 0x07, 0x91, 0x0f, 0x4a, 0x2d, 0x2c, 0x4d, 0x2d, 0x2e, 0x81, 0xaa, 0x90, 0x12, 0x44,
	0x56, 0x01, 0xd6, 0xab, 0xc4, 0x20, 0xe4, 0xc3, 0xc5, 0xef, 0x92, 0x9a, 0x93, 0x0a, 0x35, 0xcc,
	0xa9, 0xd2, 0xd3, 0x45, 0x48, 0x05, 0x59, 0x1d, 0x44, 0x12, 0x24, 0x8e, 0xcf, 0x34, 0xd7, 0xdc,
	0x82, 0x92, 0x4a, 0x25, 0x06, 0x84, 0xd3, 0x82, 0x41, 0x5e, 0x23, 0xd3, 0x69, 0x60, 0xbd, 0xc8,
	0x4e, 0x03, 0x0b, 0x50, 0xe8, 0x34, 0x27, 0xce, 0x28, 0x76, 0x68, 0xf8, 0x26, 0xb1, 0x81, 0x83,
	0xd6, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0xa8, 0x83, 0xb8, 0x70, 0xdc, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ExampleServiceClient is the client API for ExampleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ExampleServiceClient interface {
	// Topic
	CreateTopicExample(ctx context.Context, in *CreateRequestExample, opts ...grpc.CallOption) (*Topic, error)
	DeleteTopicByID(ctx context.Context, in *DeleteByIDRequestExample, opts ...grpc.CallOption) (*Empty, error)
	// Story
	CreateStoryExample(ctx context.Context, in *CreateRequestExample, opts ...grpc.CallOption) (*Story, error)
	DeleteStoryByID(ctx context.Context, in *DeleteByIDRequestExample, opts ...grpc.CallOption) (*Empty, error)
}

type exampleServiceClient struct {
	cc *grpc.ClientConn
}

func NewExampleServiceClient(cc *grpc.ClientConn) ExampleServiceClient {
	return &exampleServiceClient{cc}
}

func (c *exampleServiceClient) CreateTopicExample(ctx context.Context, in *CreateRequestExample, opts ...grpc.CallOption) (*Topic, error) {
	out := new(Topic)
	err := c.cc.Invoke(ctx, "/pb.content.ExampleService/CreateTopicExample", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exampleServiceClient) DeleteTopicByID(ctx context.Context, in *DeleteByIDRequestExample, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/pb.content.ExampleService/DeleteTopicByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exampleServiceClient) CreateStoryExample(ctx context.Context, in *CreateRequestExample, opts ...grpc.CallOption) (*Story, error) {
	out := new(Story)
	err := c.cc.Invoke(ctx, "/pb.content.ExampleService/CreateStoryExample", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exampleServiceClient) DeleteStoryByID(ctx context.Context, in *DeleteByIDRequestExample, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/pb.content.ExampleService/DeleteStoryByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExampleServiceServer is the server API for ExampleService service.
type ExampleServiceServer interface {
	// Topic
	CreateTopicExample(context.Context, *CreateRequestExample) (*Topic, error)
	DeleteTopicByID(context.Context, *DeleteByIDRequestExample) (*Empty, error)
	// Story
	CreateStoryExample(context.Context, *CreateRequestExample) (*Story, error)
	DeleteStoryByID(context.Context, *DeleteByIDRequestExample) (*Empty, error)
}

// UnimplementedExampleServiceServer can be embedded to have forward compatible implementations.
type UnimplementedExampleServiceServer struct {
}

func (*UnimplementedExampleServiceServer) CreateTopicExample(ctx context.Context, req *CreateRequestExample) (*Topic, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTopicExample not implemented")
}
func (*UnimplementedExampleServiceServer) DeleteTopicByID(ctx context.Context, req *DeleteByIDRequestExample) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTopicByID not implemented")
}
func (*UnimplementedExampleServiceServer) CreateStoryExample(ctx context.Context, req *CreateRequestExample) (*Story, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStoryExample not implemented")
}
func (*UnimplementedExampleServiceServer) DeleteStoryByID(ctx context.Context, req *DeleteByIDRequestExample) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteStoryByID not implemented")
}

func RegisterExampleServiceServer(s *grpc.Server, srv ExampleServiceServer) {
	s.RegisterService(&_ExampleService_serviceDesc, srv)
}

func _ExampleService_CreateTopicExample_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequestExample)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExampleServiceServer).CreateTopicExample(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.content.ExampleService/CreateTopicExample",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExampleServiceServer).CreateTopicExample(ctx, req.(*CreateRequestExample))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExampleService_DeleteTopicByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteByIDRequestExample)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExampleServiceServer).DeleteTopicByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.content.ExampleService/DeleteTopicByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExampleServiceServer).DeleteTopicByID(ctx, req.(*DeleteByIDRequestExample))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExampleService_CreateStoryExample_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequestExample)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExampleServiceServer).CreateStoryExample(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.content.ExampleService/CreateStoryExample",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExampleServiceServer).CreateStoryExample(ctx, req.(*CreateRequestExample))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExampleService_DeleteStoryByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteByIDRequestExample)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExampleServiceServer).DeleteStoryByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.content.ExampleService/DeleteStoryByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExampleServiceServer).DeleteStoryByID(ctx, req.(*DeleteByIDRequestExample))
	}
	return interceptor(ctx, in, info, handler)
}

var _ExampleService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.content.ExampleService",
	HandlerType: (*ExampleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTopicExample",
			Handler:    _ExampleService_CreateTopicExample_Handler,
		},
		{
			MethodName: "DeleteTopicByID",
			Handler:    _ExampleService_DeleteTopicByID_Handler,
		},
		{
			MethodName: "CreateStoryExample",
			Handler:    _ExampleService_CreateStoryExample_Handler,
		},
		{
			MethodName: "DeleteStoryByID",
			Handler:    _ExampleService_DeleteStoryByID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/example/example.proto",
}
